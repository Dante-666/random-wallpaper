# This is a basic workflow to help you get started with Actions

name: linux

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  linux-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Cache dependencies
        uses: actions/cache@v2
        id: libcache
        with:
          path: /opt/cache
          key: ${{ runner.os }}
      - name: Setup premake
        uses: abel0b/setup-premake@8463d9a3b900273c6863825a886aaa3a129f7db6
      - name: Setup libcurl
        if: steps.libcache.outputs.cache-hit != 'true'
        run: |
            sudo apt-get update
            sudo apt-get install libcurl4-openssl-dev
      - name: Install gtest
        if: steps.libcache.outputs.cache-hit != 'true'
        uses: MarkusJx/googletest-installer@v1.1
      - name: Cache artifacts
        if: steps.libcache.outputs.cache-hit != 'true'
        run: |
          sudo mkdir -p /opt/cache/curl/lib
          sudo mkdir -p /opt/cache/gtest/lib
          sudo ls /usr/include
          sudo ls /usr/local/include
          sudo ls /usr/local/lib/x86_64-linux-gnu
          echo $(sudo ls /usr/include)
          echo $(sudo ls /usr/local/include)
          echo $(sudo ls /usr/local/lib/x86_64-linux-gnu)
          sudo cp -R /usr/include/curl /opt/cache/curl
          sudo cp /usr/lib/x86_64-linux-gnu/libcurl* /opt/cache/curl/lib
          sudo cp -R /usr/include/gtest /opt/cache/gtest
          sudo cp /usr/lib/libgtest* /opt/cache/gtest/lib
      - name: Restore cache
        if: steps.libcache.outputs.cache-hit == 'true'
        run: |
          sudo cp /opt/cache/curl/lib/libcurl* /usr/lib/x86_64-linux-gnu
          sudo cp -R /opt/cache/gtest/gtest /usr/include
          sudo cp /opt/cache/gtest/lib/*.a /usr/lib
      - name: Configure and build
        run: |
            premake5 gmake2 && cd build && make config=release -j
      - name: Run tests
        run: |
            ./build/bin/Release/tests
